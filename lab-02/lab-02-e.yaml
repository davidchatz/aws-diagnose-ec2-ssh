AWSTemplateFormatVersion: "2010-09-09"

Description: Lab-02-E Inbound port 22, outbound unprivileged port rules

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: VPC Configuration
        Parameters:
          - vpcCIDR
          - subnetCIDR
      -
        Label:
          default: EC2 Configuration
        Parameters:
          - keyPair
      -
        Label:
          default: External Network
        Parameters:
          - srcIp

    ParameterLabels:
      vpcCIDR:
        default: VPC CIDR
      subnetCIDR:
        default: Subnet CIDR (subset of VPC CIDR)
      keyPair:
        default: EC2 Key Pair
      srcIp:
        default: Your desktop IP address, google 'whats my ip' if unsure


Parameters:
  vpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

  subnetCIDR:
    Type: String
    Default: 10.0.10.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

  keyPair:
    Type: "AWS::EC2::KeyPair::KeyName"
    AllowedPattern: ^[A-Za-z0-9][A-Za-z0-9_\-]*[A-Za-z0-9]$
    ConstraintDescription: 3 to 64 upper case, lower case, underscores or dashes, must  start or end with a letter or number

  srcIp:
    Type: String
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
    ConstraintDescription: Must be a valid IP address of the form x.x.x.x/x.

# From https://aws.amazon.com/amazon-linux-ami/ June 2017
Mappings:
  RegionMap:
    us-east-1:
      "AMALINUX" : "ami-643b1972"
    us-east-2:
      "AMALINUX" : "ami-3883a55d"
    us-west-1:
      "AMALINUX" : "ami-a07379d9"
    us-west-2:
      "AMALINUX" : "ami-563a1736"
    ca-central-1:
      "AMALINUX" : "ami-20db6444"
    eu-west-1:
      "AMALINUX" : "ami-7d50491b"
    eu-central-1:
      "AMALINUX" : "ami-8da700e2"
    eu-west-2:
      "AMALINUX" : "ami-704e5814"
    ap-southeast-1:
      "AMALINUX" : "ami-58d65b3b"
    ap-southeast-2:
      "AMALINUX" : "ami-a18392c2"
    ap-northeast-2:
      "AMALINUX" : "ami-9bab74f5"
    ap-northeast-1:
      "AMALINUX" : "ami-bbf2f9dc"
    ap-south-1:
      "AMALINUX" : "ami-3c89f653"
    sa-east-1:
      "AMALINUX" : "ami-1d660d71"

Resources:

  logsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", ["role-logs", !Ref "AWS::StackName", !Ref "AWS::Region"]]
      Path: "/"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service:
              - "vpc-flow-logs.amazonaws.com"
          Action:
            - "sts:AssumeRole"
      Policies:
        -
          PolicyName: !Join ["-", ["pol-write-logs", !Ref "AWS::StackName"]]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Sid: WriteToCloudWatchLogs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: "*"

  logGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Join ["-", ["loggrp-vpc", !Ref "AWS::StackName"]]

  flowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt logsRole.Arn
      LogGroupName: !Ref logGroup
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref vpcCIDR
      Tags:
        - Key: Name
          Value: !Join ["-", ["vpc", !Ref "AWS::StackName"]]
        - Key: Desc
          Value: VPC used in ec2-ssh-lab

  internetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-", ["ig", !Ref "AWS::StackName"]]
        - Key: Desc
          Value: Internet Gateway in ec2-ssh-lab

  internetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref internetGateway
      VpcId: !Ref VPC

  subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref subnetCIDR
      Tags:
        - Key: Name
          Value: !Join ["-", ["sn", !Ref "AWS::StackName"]]
        - Key: Desc
          Value: Subnet for ec2-ssh-lab

  routeTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ["-", ["rt", !Ref "AWS::StackName"]]
        - Key: Desc
          Value: Route table for ec2-ssh-lab

  defaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref routeTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref internetGateway

  subnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref routeTable
      SubnetId: !Ref subnet

  networkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ["-", ["nacl", !Ref "AWS::StackName"]]
        - Key: Desc
          Value: NACL for use in ec2-ssh-lab

  inboundSSHEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref networkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 22
        To: 22

  outboundSSHEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref networkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  # inboundSSHEntry:
  #   Type: AWS::EC2::NetworkAclEntry
  #   Properties:
  #     NetworkAclId: !Ref networkAcl
  #     RuleNumber: 100
  #     Protocol: -1
  #     RuleAction: allow
  #     Egress: false
  #     CidrBlock: 0.0.0.0/0
  #     Icmp:
  #       Code: "-1"
  #       Type: "-1"

  # outboundSSHEntry:
  #   Type: AWS::EC2::NetworkAclEntry
  #   Properties:
  #     NetworkAclId: !Ref networkAcl
  #     RuleNumber: 100
  #     Protocol: -1
  #     RuleAction: allow
  #     Egress: true
  #     CidrBlock: 0.0.0.0/0
  #     Icmp:
  #       Code: "-1"
  #       Type: "-1"

  subnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref subnet
      NetworkAclId: !Ref networkAcl

  securityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: !Join ["-", ["secgrp", !Ref "AWS::StackName"]]
      GroupDescription: Security group for ssh access to instance in ec2-ssh-lab
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Join ["/", [!Ref srcIp, "32"]]
      Tags:
        - Key: Name
          Value: !Join ["-", ["sg", !Ref "AWS::StackName"]]
        - Key: Desc
          Value: Security group for ssh access to instance in ec2-ssh-lab

  instance:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref subnet
      SecurityGroupIds: 
      - !Ref securityGroup
      KeyName: !Ref keyPair
      InstanceType: t2.micro
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX]
      Tags:
        - Key: Name
          Value: !Join ["-", ["inst", !Ref "AWS::StackName"]]
        - Key: Desc
          Value: Instance we are attempting to ssh to in ec2-ssh-lab


Outputs:
  publicIP:
    Description: Public IP of EC2 instance
    Value: !GetAtt instance.PublicIp
  sshCommand:
    Description: SSH command line to connect to instance
    Value: !Join ["", ["ssh -i ", !Ref keyPair, ".pem ec2-user@", !GetAtt instance.PublicIp]]